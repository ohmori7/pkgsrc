$NetBSD: patch-meson.build,v 1.3 2021/03/06 21:50:34 leot Exp $

* Add NetBSD support.
* Detect iconv in libc properly for pkgsrc (pkgsrc removes -liconv)
  to fix qemu-system-aarch64 link.
* Detect curses (non-ncurses{,w} too)

--- meson.build.orig	2020-12-08 16:59:44.000000000 +0000
+++ meson.build
@@ -84,6 +84,7 @@ if cpu in ['x86', 'x86_64']
   accelerator_targets += {
     'CONFIG_HAX': ['i386-softmmu', 'x86_64-softmmu'],
     'CONFIG_HVF': ['x86_64-softmmu'],
+    'CONFIG_NVMM': ['x86_64-softmmu'],
     'CONFIG_WHPX': ['i386-softmmu', 'x86_64-softmmu'],
   }
 endif
@@ -169,6 +170,7 @@ version_res = []
 coref = []
 iokit = []
 emulator_link_args = []
+nvmm = []
 cocoa = not_found
 hvf = not_found
 if targetos == 'windows'
@@ -196,6 +198,10 @@ elif targetos == 'openbsd'
     # Disable OpenBSD W^X if available
     emulator_link_args = cc.get_supported_link_arguments('-Wl,-z,wxneeded')
   endif
+elif targetos == 'netbsd'
+  if not get_option('nvmm').disabled()
+    nvmm = cc.find_library('nvmm')
+  endif
 endif
 
 accelerators = []
@@ -228,6 +234,11 @@ if not get_option('hax').disabled()
     accelerators += 'CONFIG_HAX'
   endif
 endif
+if not get_option('nvmm').disabled()
+  if cc.has_header('nvmm.h', required: get_option('nvmm'))
+    accelerators += 'CONFIG_NVMM'
+  endif
+endif
 if not get_option('tcg').disabled()
   if cpu not in supported_cpus
     if 'CONFIG_TCG_INTERPRETER' in config_host
@@ -246,6 +257,9 @@ endif
 if 'CONFIG_HVF' not in accelerators and get_option('hvf').enabled()
   error('HVF not available on this platform')
 endif
+if 'CONFIG_NVMM' not in accelerators and get_option('nvmm').enabled()
+  error('NVMM not available on this platform')
+endif
 if 'CONFIG_WHPX' not in accelerators and get_option('whpx').enabled()
   error('WHPX not available on this platform')
 endif
@@ -517,7 +531,7 @@ if have_system and not get_option('curse
       has_curses_h = cc.has_header('curses.h', args: curses_compile_args)
     endif
     if has_curses_h
-      curses_libname_list = (targetos == 'windows' ? ['pdcurses'] : ['ncursesw', 'cursesw'])
+      curses_libname_list = (targetos == 'windows' ? ['pdcurses'] : ['ncursesw', 'cursesw', 'curses'])
       foreach curses_libname : curses_libname_list
         libcurses = cc.find_library(curses_libname,
                                     required: false,
@@ -535,7 +549,7 @@ if have_system and not get_option('curse
     endif
   endif
   if not get_option('iconv').disabled()
-    foreach link_args : [ ['-liconv'], [] ]
+    foreach link_args : [ [], ['-liconv'] ]
       # Programs will be linked with glib and this will bring in libiconv on FreeBSD.
       # We need to use libiconv if available because mixing libiconv's headers with
       # the system libc does not work.
@@ -1815,7 +1829,7 @@ foreach target : target_dirs
       'name': 'qemu-system-' + target_name,
       'gui': false,
       'sources': files('softmmu/main.c'),
-      'dependencies': []
+      'dependencies': [nvmm]
     }]
     if targetos == 'windows' and (sdl.found() or gtk.found())
       execs += [{
@@ -2106,6 +2120,7 @@ summary_info += {'Install blobs':     ge
 summary_info += {'KVM support':       config_all.has_key('CONFIG_KVM')}
 summary_info += {'HAX support':       config_all.has_key('CONFIG_HAX')}
 summary_info += {'HVF support':       config_all.has_key('CONFIG_HVF')}
+summary_info += {'NVMM support':      config_all.has_key('CONFIG_NVMM')}
 summary_info += {'WHPX support':      config_all.has_key('CONFIG_WHPX')}
 summary_info += {'TCG support':       config_all.has_key('CONFIG_TCG')}
 if config_all.has_key('CONFIG_TCG')
